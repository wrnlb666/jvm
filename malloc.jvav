; testing alloc memory and free memory on the heap
import libheap.so as heap
import libprint.so as print

call main
halt

main: 
    ; 26 total characters
    push 26
    dup 0

    ; allocate memory and print it
    native heap.vm_malloc

    ; print the address obtained by FFI: libc malloc
    dup 0
    native print.print_ptr

    ; print new line for nicer look
    native print.print_newline

    ; for loop to store 'A' to 'Z' on the heap
    push 0  ; int i = 0
    add_to_heap:
        ; i < 26
        dup 0
        dup 3
        cmpi
        jge add_to_heap_break

        dup 1   ; address
        dup 1   ; index

        ; value
        dup 0
        push 65
        addi

        native heap.vm_heap_push

        ; i++
        push 1
        addi
        
        jmp add_to_heap

    add_to_heap_break:
        pop 1

    ; for loop to print 'A' to 'Z' from the heap
    push 0  ; int i = 0
    print_heap:
        ; i < 26
        dup 0
        dup 3
        cmpi
        jge print_heap_break

        dup 1   ; address
        dup 1   ; index

        ; get utf32 character from heap
        native heap.vm_heap_pop

        ; print character
        native print.print_utf32

        ; print a space for nicer look
        push 1
        native print.print_space

        ; i++
        push 1
        addi

        jmp print_heap

    print_heap_break: 
        pop 1


    native print.print_newline

    native heap.vm_free
    pop 1
    ret