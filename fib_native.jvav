; testing native function calls with fibonacci sequence
import libprint.dll as print

    call main
    halt

fib: 
    ; argument compensate
    swap 3

    ; save iteration number for later use
    dup 2
    swap 2
    swap 1

    loop: 
        ; print iteration counts
        dup 3
        dup 3
        subi
        native print.print_int

        ; print colon
        push 58
        native print.print_utf8

        ; print 1 space
        push 1
        native print.print_space

        ; perform fibonacci
        dup 0
        swap 2
        addi

        ; print 1st num
        dup 1
        native print.print_int

        ; print 1 space
        push 1
        native print.print_space

        ; print 2nd num
        dup 0
        native print.print_int

        ; print new line
        native print.print_newline

        ; perform for loop
        push 0
        swap 3
        push 1
        subi
        dup 0
        swap 4
        pop 1
        jne loop
    ; clean up
    pop 4
    ret


; F0 F1 F2 F3 F4 F5	F6 F7 F8 F9	 F10  F11 F12  F13  F14  F15  F16  F17	 F18   F19
; 0	 1	1  2  3	 5	8  13 21 34	 55	  89  144  233	377	 610  987  1597  2584  4181


main:
    swap 0
    push 1      ; argument 3: last argument get pushed first to compensate
    push 10     ; argument 1: iteration counts
    push 0      ; argument 2
    call fib
    ret


; int a = 0;
; int b = 1;
; for ( int i = 0; i < 10; i++ )
; {
;     int c = a + b;
;     a = b;
;     b = c;
; }
